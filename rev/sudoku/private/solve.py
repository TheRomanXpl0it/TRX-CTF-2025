import numpy as np
from z3 import *

N = 5
N2 = N * N

def print_board(board):
    print(board)
    for row in board:
        print(" ".join(str(num) for num in row))

def solve_layer_z3(grid2d):
    s = Solver()
    x = [[BitVec(f"x_{i}_{j}", 8) for j in range(N2)] for i in range(N2)]
    for i in range(N2):
        for j in range(N2):
            if grid2d[i][j] != 0:
                s.add(x[i][j] == grid2d[i][j])
            else:
                s.add(1 <= x[i][j], x[i][j] <= N2)
    
    for i in range(N2):
        s.add(Distinct(x[i]))
        s.add(Distinct([x[j][i] for j in range(N2)]))
    
    for i in range(0, N2, N):
        for j in range(0, N2, N):
            s.add(Distinct([x[i + k][j + l] for k in range(N) for l in range(N)]))
    
    if s.check() == sat:
        print("Solved!")
        m = s.model()
        for i in range(N2):
            for j in range(N2):
                grid2d[i][j] = m[x[i][j]].as_long()

        return grid2d
    print("Unsolved!")
    return []


board = [[0, 0, 0, 21, 0, 11, 0, 0, 3, 24, 9, 20, 23, 0, 7, 22, 0, 5, 18, 0, 15, 2, 16, 13, 0], [24, 4, 0, 20, 15, 0, 0, 5, 0, 16, 2, 25, 22, 0, 17, 6, 21, 0, 14, 0, 8, 10, 1, 19, 18], [0, 0, 10, 0, 5, 0, 21, 19, 22, 0, 3, 13, 1, 16, 0, 15, 4, 7, 23, 24, 12, 0, 14, 0, 0], [0, 0, 13, 6, 12, 14, 4, 1, 0, 0, 24, 18, 19, 5, 0, 0, 17, 0, 0, 0, 7, 22, 0, 9, 21], [0, 23, 19, 7, 0, 0, 6, 0, 0, 20, 15, 4, 0, 21, 0, 0, 0, 0, 16, 10, 24, 3, 0, 17, 5], [12, 15, 21, 0, 0, 0, 16, 6, 18, 5, 7, 0, 17, 3, 9, 14, 0, 4, 24, 22, 13, 0, 0, 0, 0], [14, 10, 11, 2, 24, 1, 25, 22, 20, 0, 0, 23, 6, 19, 0, 13, 5, 8, 12, 0, 17, 0, 7, 15, 9], [0, 0, 0, 0, 1, 24, 0, 3, 15, 10, 20, 8, 5, 0, 25, 9, 16, 19, 21, 0, 2, 6, 0, 12, 14], [0, 0, 5, 0, 3, 0, 23, 14, 8, 0, 0, 2, 15, 0, 12, 0, 7, 1, 17, 6, 22, 21, 4, 0, 19], [13, 0, 0, 4, 20, 0, 0, 0, 17, 0, 11, 16, 0, 0, 22, 0, 10, 18, 15, 23, 0, 25, 8, 1, 3], [20, 25, 7, 22, 0, 23, 0, 10, 1, 0, 0, 0, 0, 13, 4, 21, 0, 6, 19, 0, 3, 9, 15, 8, 0], [1, 24, 0, 0, 0, 4, 0, 20, 13, 0, 8, 0, 3, 0, 19, 16, 2, 12, 9, 5, 0, 14, 10, 25, 22], [0, 0, 0, 0, 0, 0, 0, 9, 24, 0, 25, 6, 0, 2, 16, 4, 8, 10, 0, 17, 18, 7, 21, 0, 1], [0, 8, 0, 10, 14, 16, 3, 25, 6, 0, 0, 7, 18, 9, 11, 0, 13, 0, 20, 0, 19, 24, 5, 0, 17], [17, 3, 0, 15, 9, 5, 0, 0, 11, 0, 0, 21, 0, 0, 23, 7, 0, 22, 0, 0, 20, 13, 12, 4, 6], [15, 0, 20, 11, 21, 10, 0, 0, 5, 22, 16, 0, 0, 8, 3, 24, 0, 13, 2, 19, 0, 0, 0, 0, 0], [0, 13, 8, 0, 19, 17, 0, 0, 0, 0, 0, 12, 7, 24, 6, 0, 15, 23, 22, 4, 14, 5, 9, 0, 0], [9, 1, 23, 14, 4, 0, 24, 0, 7, 8, 19, 0, 2, 0, 13, 17, 3, 20, 5, 0, 0, 15, 0, 16, 10], [10, 0, 2, 12, 0, 13, 18, 15, 0, 0, 17, 5, 0, 20, 21, 8, 1, 16, 0, 7, 0, 19, 0, 11, 0], [7, 5, 17, 24, 16, 20, 2, 11, 19, 3, 23, 0, 4, 15, 1, 18, 14, 0, 10, 0, 0, 8, 13, 21, 12], [0, 20, 9, 0, 7, 15, 22, 17, 10, 0, 12, 19, 0, 0, 24, 25, 0, 14, 4, 8, 16, 18, 2, 0, 0], [19, 2, 24, 8, 0, 0, 20, 7, 4, 0, 0, 0, 9, 0, 15, 5, 0, 21, 11, 16, 1, 0, 0, 14, 25], [0, 0, 25, 1, 0, 8, 5, 23, 14, 6, 4, 17, 16, 0, 2, 0, 20, 0, 13, 9, 10, 12, 24, 7, 15], [0, 0, 14, 0, 0, 0, 0, 0, 0, 2, 6, 10, 13, 0, 5, 12, 0, 24, 0, 0, 9, 11, 0, 3, 8], [6, 0, 15, 0, 13, 0, 0, 24, 0, 9, 1, 0, 8, 25, 0, 10, 18, 17, 0, 2, 0, 4, 19, 0, 23]]
board = solve_layer_z3(board)


A = [2.40730024, 3.52795552, -1.77118277, -3.21942618, -2.81138137, -3.60802597, 1.86051666, 3.86948988, 1.27937421, -0.96357686, 3.21355026, -1.57705018, 2.3197017, 0.15847021, -4.27518901, -0.70971959, -2.77817208, 5.16719809, 4.02597733, 4.75077767, 0.81294202, -5.56832771, -2.33760069, 0.50749877, 2.52197679, 0.66154349, 1.45858961, 0.57051573, 0.31238932, -1.58938559, -0.7010957, 0.70390144, -0.83454445, 4.56571847, -0.33819606, 2.081262, -0.12496723, 5.21202568, 0.84758812, -4.51370257, -2.81155389, -6.26384178, 3.09152486, 4.90150442, 0.46263767, 2.59381792, -6.05432952, -0.7670083, -3.40705352, 6.12419834]

F = np.concatenate((np.array(board) @ np.array(A[:N2]), np.array(board) @ np.array(A[N2:])))

print("".join([chr(round(c)) for c in F])) 